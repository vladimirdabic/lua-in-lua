

local class Test2
    field wow = "Test"
end

-- classes are defined in the global scope if you don't specify that they're local
local class Test extends Test2
    field a
    field b = "XD"

    function constructor(self)
        self.a = 20
    end

    static function say(msg)
        print("Msg: ".. msg)
    end

    function add(self, x, y)
        return x + y
    end

    static class Values
        static field msg = "Hello World"
    end
end

local enum TestEnum
    FIRST, SECOND,
    MESSAGE = "Hello World";
    THIRD
end


print(TestEnum.FIRST)
print(TestEnum.SECOND)
print(TestEnum.THIRD)
print(TestEnum.MESSAGE)
print(Test.Values.msg)

local class_inst = Test()
print(class_inst.a)
print(class_inst.b)
print(class_inst.wow)

Test.say("Lol")
print(class_inst:add(2, 2))

-- Stuff we really need in Lua :^)
local num = 20
print(num)
num += 2
print(num)
num -= 5
print(num)
num *= 5
print(num)
num /= 5
print(num)



##[[
-- Define a custom rule in the preprocessor
print("preprocessor")

parser:addRule('statement', function(self)
    if self:match('if') and self:match('OPEN_PAREN') then
        local expr = self:parseExpr()
        self:consume('CLOSE_PAREN', "Expected ')' after C style if statement")
        self:consume('OPEN_BRACE', "Expected '{' after C style if statement")

        local body = self:parseBlock('CLOSE_BRACE')
        return {type='cif', expr=expr, body=body}
    end
end)

-- if using getTree, interpreter is not passed
-- be careful as the custom evaluators aren't reset, they will still be there after you run code later
-- on the other hand, the rules are reset, so you always have to redefine the rules
if interpreter then
    interpreter.evals['cif'] = function(self, node, environment)
        local value = self:evaluate(node.expr, environment)

        if value then
            local new_env = self:encloseEnvironment(environment)
            self:evaluate(node.body, new_env)
        end
    end
end
]]

-- now works
if(true) {
    print("C Style if wow")
}

local a = ##[[ return get_call(variable('class_inst'), 'add', literal(2), literal(2)) ]]
print("Node generated from preprocessor: " .. a)


-- how to achieve #define like in C
##[[
if not defined_thing then
    print("This isn't defined, it is now though")
    defined_thing = true
end
]]

-- seperate preprocessor block
##[[
if not defined_thing then
    print("This shouldn't appear")
end
]]